"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["274"],{5456:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>o,metadata:()=>s,assets:()=>d,toc:()=>h,contentTitle:()=>c});var s=JSON.parse('{"id":"quick-start","title":"Quick start","description":"This quick start guide presents how to:","source":"@site/docs/quick-start.mdx","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/introduction"},"next":{"title":"Mokei CLI","permalink":"/docs/cli"}}'),r=t("5367"),i=t("8250"),a=t("4222"),l=t("585");let o={},c="Quick start",d={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Environment",id:"environment",level:3},{value:"CLI",id:"cli",level:3},{value:"Packages",id:"packages",level:3},{value:"Creating the server",id:"creating-the-server",level:2},{value:"Package setup",id:"package-setup",level:3},{value:"Server implementation",id:"server-implementation",level:3},{value:"Creating the database",id:"creating-the-database",level:4},{value:"Tool schema",id:"tool-schema",level:4},{value:"Server specification",id:"server-specification",level:4},{value:"MCP implementation",id:"mcp-implementation",level:4},{value:"Full implementation",id:"full-implementation",level:4},{value:"Inspecting the server",id:"inspecting-the-server",level:2},{value:"Starting the monitor",id:"starting-the-monitor",level:2},{value:"Interacting with the server",id:"interacting-with-the-server",level:2},{value:"Using Ollama via the Mokei CLI",id:"using-ollama-via-the-mokei-cli",level:3},{value:"Prerequisites",id:"prerequisites-1",level:4},{value:"Start the interactive session",id:"start-the-interactive-session",level:4},{value:"Add the MCP server",id:"add-the-mcp-server",level:4},{value:"Using Claude for Desktop with a Mokei proxy",id:"using-claude-for-desktop-with-a-mokei-proxy",level:3},{value:"Next steps",id:"next-steps",level:2}];function u(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quick-start",children:"Quick start"})}),"\n",(0,r.jsx)(n.p,{children:"This quick start guide presents how to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a simple MCP server allowing a LLM to interact with a local SQLite database, using ",(0,r.jsx)(n.a,{href:"https://nodejs.org/docs/latest/api/sqlite.html",children:"Node.js' SQLite module"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Use the Mokei CLI to check the MCP server initialization."}),"\n",(0,r.jsx)(n.li,{children:"Use the Mokei Monitor to track MCP client-server interactions."}),"\n",(0,r.jsx)(n.li,{children:"Interact with the MCP server using the Mokei CLI or Claude Desktop."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"environment",children:"Environment"}),"\n",(0,r.jsxs)(n.p,{children:["This quick start guide requires using ",(0,r.jsx)(n.a,{href:"https://nodejs.org/en",children:"Node.js"})," v22.5.0+ and npm (included with Node.js) or an alternative package manager."]}),"\n",(0,r.jsx)(n.h3,{id:"cli",children:"CLI"}),"\n",(0,r.jsxs)(a.Z,{groupId:"package-manager",children:[(0,r.jsx)(l.Z,{value:"npm",label:"npm",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"npm install -g mokei\n"})})}),(0,r.jsx)(l.Z,{value:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"pnpm add -g mokei\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"packages",children:"Packages"}),"\n",(0,r.jsxs)(n.p,{children:["All Mokei packages are available on the npm registry. See the ",(0,r.jsx)(n.a,{href:"/docs/api",children:"API documentation"})," for an overview of the packages and installation instructions for each package."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-the-server",children:"Creating the server"}),"\n",(0,r.jsx)(n.h3,{id:"package-setup",children:"Package setup"}),"\n",(0,r.jsxs)(n.p,{children:["First, let's create a new directory for the project, for example ",(0,r.jsx)(n.code,{children:"mokei-quick-start"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"mkdir mokei-quick-start && cd mokei-quick-start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, let's setup the Node project with a ",(0,r.jsx)(n.code,{children:"package.json"})," and the ",(0,r.jsx)(n.code,{children:"@mokei/context-server"})," library we are going to use:"]}),"\n",(0,r.jsxs)(a.Z,{groupId:"package-manager",children:[(0,r.jsx)(l.Z,{value:"npm",label:"npm",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"npm init -y && npm install @mokei/context-server\n"})})}),(0,r.jsx)(l.Z,{value:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"pnpm init && pnpm add @mokei/context-server\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Finally, let's edit the ",(0,r.jsx)(n.code,{children:"package.json"})," and add ",(0,r.jsx)(n.code,{children:'"type": "module"'})," to support ESM:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="package.json" {5}',children:'{\n  "name": "mokei-quick-start",\n  "version": "1.0.0",\n  "description": "",\n  "type": "module",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "@mokei/context-server": "^0.1.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"server-implementation",children:"Server implementation"}),"\n",(0,r.jsxs)(n.p,{children:["Now let's create the ",(0,r.jsx)(n.code,{children:"index.js"})," file with the following imports:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:"import { DatabaseSync } from 'node:sqlite'\nimport { parseArgs } from 'node:util'\nimport { serve } from '@mokei/context-server'\n"})}),"\n",(0,r.jsx)(n.h4,{id:"creating-the-database",children:"Creating the database"}),"\n",(0,r.jsxs)(n.p,{children:["In this step, we'll use the ",(0,r.jsxs)(n.a,{href:"https://nodejs.org/docs/latest/api/sqlite.html#class-databasesync",children:[(0,r.jsx)(n.code,{children:"DatabaseSync"})," class"]})," and the ",(0,r.jsxs)(n.a,{href:"https://nodejs.org/docs/latest/api/util.html#utilparseargsconfig",children:[(0,r.jsx)(n.code,{children:"parseArgs"})," function"]})," from Node.js to create a database using the path provided as an argument when starting the MCP server process using the ",(0,r.jsx)(n.code,{children:"--db"})," flag, or only use an in-memory database by default:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js (continued)"',children:"const args = parseArgs({\n  options: {\n    db: { type: 'string' },\n  },\n})\nconst db = new DatabaseSync(args.values.db ?? ':memory:')\n"})}),"\n",(0,r.jsx)(n.h4,{id:"tool-schema",children:"Tool schema"}),"\n",(0,r.jsxs)(n.p,{children:["In this step, we'll use a ",(0,r.jsx)(n.a,{href:"https://json-schema.org/",children:"JSON Schema"})," to define the API the LLM will be able to use to interact with the database:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js (continued)"',children:"const toolInputSchema = {\n  type: 'object',\n  properties: {\n    sql: { type: 'string', description: 'A SQL string to compile to a prepared statement' },\n    parameters: {\n      type: 'object',\n      additionalProperties: {\n        anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'null' }],\n      },\n      description: 'An object of parameter values',\n    },\n  },\n  required: ['sql'],\n  additionalProperties: false,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Our defined tool input is a JSON object containing two properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sql"}),": the SQL statement string (required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parameters"}),": a JSON object containing the values of named parameters used in the statement, supported value types being ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"number"})," and ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Providing a ",(0,r.jsx)(n.code,{children:"description"})," to each property allows to provide information about how to use these properties to the LLM."]}),"\n",(0,r.jsx)(n.h4,{id:"server-specification",children:"Server specification"}),"\n",(0,r.jsxs)(n.p,{children:["Using our ",(0,r.jsx)(n.code,{children:"toolInputSchema"})," defined above, we'll now define the full server specification, describing the API that our server will expose:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js (continued)"',children:"const specification = {\n  tools: {\n    sqlite_all: {\n      description:\n        'This method executes a prepared statement and returns all results as an array of objects',\n      input: toolInputSchema,\n    },\n    sqlite_get: {\n      description:\n        'This method executes a prepared statement and returns the first result as an object',\n      input: toolInputSchema,\n    },\n    sqlite_run: {\n      description:\n        'This method executes a prepared statement and returns an object summarizing the resulting changes',\n      input: toolInputSchema,\n    },\n  },\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we define 3 tools, approximately matching some of the APIs provided by ",(0,r.jsx)(n.a,{href:"https://nodejs.org/docs/latest/api/sqlite.html",children:"Node.js' SQLite module"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Each of these tools provides a ",(0,r.jsx)(n.code,{children:"description"})," to inform the LLM about usage, as well as the ",(0,r.jsx)(n.code,{children:"input"})," supported by the tool."]}),"\n",(0,r.jsx)(n.h4,{id:"mcp-implementation",children:"MCP implementation"}),"\n",(0,r.jsx)(n.p,{children:"Finally, we'll provide the implementation for the specification previously defined, and start the server to handle connections from MCP clients."}),"\n",(0,r.jsx)(n.p,{children:"The Mokei server and client libraries currently only support the Standard I/O transport."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js (continued)"',children:"serve({\n  name: 'sqlite',\n  version: '0.1.0',\n  specification,\n  tools: {\n    sqlite_all: (ctx) => {\n      const results = db.prepare(ctx.input.sql).all(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(results) }], isError: false }\n    },\n    sqlite_get: (ctx) => {\n      const result = db.prepare(ctx.input.sql).get(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(result) }], isError: false }\n    },\n    sqlite_run: (ctx) => {\n      const changes = db.prepare(ctx.input.sql).run(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(changes) }], isError: false }\n    },\n  },\n})\n"})}),"\n",(0,r.jsx)(n.h4,{id:"full-implementation",children:"Full implementation"}),"\n",(0,r.jsxs)(n.p,{children:["This example server is available on npm as the ",(0,r.jsx)(n.code,{children:"@mokei/mcp-sqlite"})," package, with its source code ",(0,r.jsx)(n.a,{href:"https://github.com/TairuFramework/mokei/tree/main/mcp-servers/sqlite",children:"available on GitHub"}),"."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)("summary",{children:["The full contents of the ",(0,r.jsx)(n.code,{children:"index.js"})," file described in the above steps is also available here."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:"import { DatabaseSync } from 'node:sqlite'\nimport { parseArgs } from 'node:util'\nimport { serve } from '@mokei/context-server'\n\nconst args = parseArgs({\n  options: {\n    db: { type: 'string' },\n  },\n})\nconst db = new DatabaseSync(args.values.db ?? ':memory:')\n\nconst toolInputSchema = {\n  type: 'object',\n  properties: {\n    sql: { type: 'string', description: 'A SQL string to compile to a prepared statement' },\n    parameters: {\n      type: 'object',\n      additionalProperties: {\n        anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'null' }],\n      },\n      description: 'An object of parameter values',\n    },\n  },\n  required: ['sql'],\n  additionalProperties: false,\n}\n\nconst specification = {\n  tools: {\n    sqlite_all: {\n      description:\n        'This method executes a prepared statement and returns all results as an array of objects',\n      input: toolInputSchema,\n    },\n    sqlite_get: {\n      description:\n        'This method executes a prepared statement and returns the first result as an object',\n      input: toolInputSchema,\n    },\n    sqlite_run: {\n      description:\n        'This method executes a prepared statement and returns an object summarizing the resulting changes',\n      input: toolInputSchema,\n    },\n  },\n}\n\nserve({\n  name: 'sqlite',\n  version: '0.1.0',\n  specification,\n  tools: {\n    sqlite_all: (ctx) => {\n      const results = db.prepare(ctx.input.sql).all(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(results) }], isError: false }\n    },\n    sqlite_get: (ctx) => {\n      const result = db.prepare(ctx.input.sql).get(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(result) }], isError: false }\n    },\n    sqlite_run: (ctx) => {\n      const changes = db.prepare(ctx.input.sql).run(ctx.input.parameters ?? {})\n      return { content: [{ type: 'text', text: JSON.stringify(changes) }], isError: false }\n    },\n  },\n})\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"inspecting-the-server",children:"Inspecting the server"}),"\n",(0,r.jsx)(n.p,{children:"Now that we have implemented a MCP server, let's see if we can interact with it!"}),"\n",(0,r.jsxs)(n.p,{children:["As a sanity check, we will use the Mokei CLI to simply run the ",(0,r.jsxs)(n.a,{href:"https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/lifecycle/#initialization",children:[(0,r.jsx)(n.code,{children:"initialize"})," request"]})," on the server to ensure the server can initialize as expected:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"mokei context inspect node -- index.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"The terminal should display the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'\u2714 Initialized\n{\n  "capabilities": {},\n  "protocolVersion": "2024-11-05",\n  "serverInfo": {\n    "name": "sqlite",\n    "version": "0.1.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"starting-the-monitor",children:"Starting the monitor"}),"\n",(0,r.jsxs)(n.p,{children:["To start a monitor, simply use the Mokei CLI to run a local HTTP server, optionally providing the ",(0,r.jsx)(n.code,{children:"port"})," you want the server to listen on:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"mokei context monitor --port 8000\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then open the URL in your Web browser, assuming the server is listening on port ",(0,r.jsx)(n.code,{children:"8000"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"open http://localhost:8000\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This should open your Web browser and display the monitor UI with a ",(0,r.jsx)(n.code,{children:"Waiting for events..."})," message."]}),"\n",(0,r.jsx)(n.h2,{id:"interacting-with-the-server",children:"Interacting with the server"}),"\n",(0,r.jsx)(n.p,{children:"In order to interact with our MCP server and view these interactions in the monitor, we need to proxy the server through the Mokei daemon."}),"\n",(0,r.jsxs)(n.p,{children:["If your device supports running LLMs locally using ",(0,r.jsx)(n.a,{href:"https://ollama.com/",children:"Ollama"}),", you can use the Mokei CLI to chat with the local model and provide it access to MCP servers. Otherwise, a client supporting MCP such as ",(0,r.jsx)(n.a,{href:"https://claude.ai/download",children:"Claude for Desktop"})," can be used."]}),"\n",(0,r.jsx)(n.h3,{id:"using-ollama-via-the-mokei-cli",children:"Using Ollama via the Mokei CLI"}),"\n",(0,r.jsx)(n.h4,{id:"prerequisites-1",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.p,{children:["The following instructions assume you have ",(0,r.jsx)(n.a,{href:"https://ollama.com/",children:"Ollama"})," running locally and have pulled ",(0,r.jsx)(n.a,{href:"https://ollama.com/search?c=tools",children:"a model supporting tools"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"start-the-interactive-session",children:"Start the interactive session"}),"\n",(0,r.jsx)(n.p,{children:"Simply use the Mokei CLI to start a chat using Ollama:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"mokei chat ollama\n"})}),"\n",(0,r.jsx)(n.p,{children:"This should produce the following prompt:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"? Select an action \u2026 \n\u276F End the session\n  Send a message\n  Add a context\n  Remove a context\n  Select tools to enable\n"})}),"\n",(0,r.jsx)(n.h4,{id:"add-the-mcp-server",children:"Add the MCP server"}),"\n",(0,r.jsxs)(n.p,{children:["Select the ",(0,r.jsx)(n.code,{children:"Add a context"})," option in the prompt:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u276F Add a context\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Fill-in the prompts to add the context, here assuming you are running the Mokei CLI from the ",(0,r.jsx)(n.code,{children:"mokei-quick-start"})," directory used in this guide:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u2714 Context key (unique per session) \xb7 sqlite\n\u2714 MCP server command \xb7 node\n\u2714 MCP server arguments (comma separated) \xb7 index.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the client successfully connects to the server, it will display the list of tools available:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"? Select tools to enable for context sqlite \u2026 \n\u2714 sqlite_all: This method executes a prepared statement and returns all results as an array of objects\n\u2714 sqlite_get: This method executes a prepared statement and returns the first result as an object\n\u2714 sqlite_run: This method executes a prepared statement and returns an object summarizing the resulting changes\n"})}),"\n",(0,r.jsx)(n.p,{children:"This prompt allows to select what tools should be enabled for the session, simply press enter here to continue with all tools enabled:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u2714 Select tools to enable for context sqlite \xb7 sqlite:sqlite_all, sqlite:sqlite_get, sqlite:sqlite_run\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once the context has been added, the monitor UI in your Web browser should display a list of events describing the interactions between the client and server that happened during this setup."}),"\n",(0,r.jsxs)(n.p,{children:["Back in the main prompt of the CLI, select the ",(0,r.jsx)(n.code,{children:"Send a message"})," option in the prompt:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u276F Send a message\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you have not provided a model using the ",(0,r.jsx)(n.code,{children:"--model"})," flag when running the ",(0,r.jsx)(n.code,{children:"chat ollama"})," command, the next prompt should ask you to select a model, for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"? Select a model \u2026 \n\u276F mistral-small:24b\n  deepseek-r1:8b\n  llama3.1:8b\n"})}),"\n",(0,r.jsx)(n.p,{children:"Your should then be able to send a message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"? Your message \u203A  \n"})}),"\n",(0,r.jsx)(n.p,{children:"You can try the following prompt for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"Using the SQLite tool, create a simple key/value table\n"})}),"\n",(0,r.jsx)(n.p,{children:"If your LLM handles the context as expected, the Mokei CLI should then ask for confirmation to execute a tool call requested by the LLM."}),"\n",(0,r.jsxs)(n.p,{children:["Pressing ",(0,r.jsx)(n.code,{children:"y"})," will allow the call to be executed on the MCP server, and the response from the server will be sent to the LLM, for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'\u2714 Allow call of tool sqlite_run in context sqlite with arguments {"parameters":{},"sql":"CREATE TABLE IF NOT EXISTS keyValue (key TEXT PRIMARY KEY, value TEXT)"}? (y/N) \xb7 true\n\n\u2139 Tool call accepted\n\u2714 Tool call successful, result: {"lastInsertRowid":0,"changes":0}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-claude-for-desktop-with-a-mokei-proxy",children:"Using Claude for Desktop with a Mokei proxy"}),"\n",(0,r.jsxs)(n.p,{children:["To use Claude for Desktop, start by following all the steps on the ",(0,r.jsx)(n.a,{href:"https://modelcontextprotocol.io/quickstart/user",children:"MCP documentation website"})," to ensure you have a working setup."]}),"\n",(0,r.jsxs)(n.p,{children:["Once your setup is working, edit the ",(0,r.jsx)(n.code,{children:"claude_desktop_config.json"})," file to add your MCP server:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="claude_desktop_config.json"',children:'{\n  "mcpServers": {\n    "sqlite": {\n      "command": "mokei",\n      "args": [\n        "context",\n        "proxy",\n        "node",\n        "--",\n        "/path/to/your/mokei-quick-start/index.js"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The (re)start Claude for Desktop and try interacting with your MCP server using a prompt such as:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"Using the SQLite tool, create a simple key/value table\n"})}),"\n",(0,r.jsx)(n.p,{children:"Claude for Desktop should ask for confirmation to call tools on your MCP server, and the Mokei monitor UI should display events for these interactions."}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsx)(n.p,{children:"Congratulations! \uD83C\uDF89"}),"\n",(0,r.jsx)(n.p,{children:"You have succesfully created and interacted with your first MCP server!"}),"\n",(0,r.jsxs)(n.p,{children:["Learn more about the ",(0,r.jsx)(n.a,{href:"/docs/cli",children:"Mokei CLI"})," and ",(0,r.jsx)(n.a,{href:"/docs/api",children:"available libraries"}),"."]})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},585:function(e,n,t){t.d(n,{Z:()=>i});var s=t("5367");t("3800");var r=t("620");function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_lvNK",i),hidden:t,children:n})}},4222:function(e,n,t){t.d(n,{Z:()=>f});var s=t("5367"),r=t("3800"),i=t("620"),a=t("3520"),l=t("5569"),o=t("3774"),c=t("2825"),d=t("3679"),h=t("3280");function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||r.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var m=t("9396");function x(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:o}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),h=e=>{let n=e.currentTarget,t=o[c.indexOf(n)].value;t!==r&&(d(n),l(t))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1]}}n?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:o.map(e=>{let{value:n,label:t,attributes:a}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:h,...a,className:(0,i.Z)("tabs__item","tabItem_Bk6Z",a?.className,{"tabs__item--active":r===n}),children:t??n},n)})})}function g(e){let{lazy:n,children:t,selectedValue:a}=e,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===a);return e?(0,r.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:s}=e,i=function(e){let{values:n,children:t}=e;return(0,r.useMemo)(()=>{let e=n??u(t).map(e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[a,m]=(0,r.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let s=t.find(e=>e.default)??t[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:n,tabValues:i})),[x,g]=function(e){let{queryString:n=!1,groupId:t}=e,s=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,r.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})},[i,s])]}({queryString:t,groupId:s}),[j,f]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[s,i]=(0,h.Nk)(t);return[s,(0,r.useCallback)(e=>{t&&i.set(e)},[t,i])]}({groupId:s}),v=(()=>{let e=x??j;return p({value:e,tabValues:i})?e:null})();return(0,o.Z)(()=>{v&&m(v)},[v]),{selectedValue:a,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);m(e),g(e),f(e)},[g,f,i]),tabValues:i}}(e);return(0,s.jsxs)("div",{className:(0,i.Z)("tabs-container","tabList_QYV1"),children:[(0,s.jsx)(x,{...n,...e}),(0,s.jsx)(g,{...n,...e})]})}function f(e){let n=(0,m.Z)();return(0,s.jsx)(j,{...e,children:u(e.children)},String(n))}},8250:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return a}});var s=t(3800);let r={},i=s.createContext(r);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);